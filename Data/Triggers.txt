-- Trigger para insumos
CREATE TRIGGER alerta_baixo_nivel_insumos AFTER UPDATE ON lotes_insumos
FOR EACH ROW
WHEN NEW.quantidade < 10 -- Defina o nível de alerta conforme necessário
BEGIN
    INSERT INTO alertas (lote_id, tipo, mensagem)
    VALUES (NEW.id, 'insumo', 'Nível baixo de insumo no lote ' || NEW.id);
END;

-- Trigger para hortaliças
CREATE TRIGGER alerta_baixo_nivel_hortalicas AFTER UPDATE ON lotes_hortalicas
FOR EACH ROW
WHEN NEW.quantidade < 10 -- Defina o nível de alerta conforme necessário
BEGIN
    INSERT INTO alertas (lote_id, tipo, mensagem)
    VALUES (NEW.id, 'hortalica', 'Nível baixo de hortaliça no lote ' || NEW.id);
END;



-- Trigger para Atualizar o Total da Ordem de Compra
CREATE TRIGGER atualizar_total_ordem_compra
AFTER INSERT ON insumos_compras
FOR EACH ROW
BEGIN
    UPDATE ordens_compras
    SET total = (SELECT SUM(ic.quantidade * ic.preco_unitario)
                 FROM insumos_compras ic
                 WHERE ic.ordem_compra_id = NEW.ordem_compra_id)
    WHERE id = NEW.ordem_compra_id;
END;


-- Trigger para Criar Lote de Insumos e Atualizar Total da Compra
CREATE TRIGGER criar_lote_insumo
AFTER INSERT ON insumos_compras
FOR EACH ROW
BEGIN
    -- Inserir um novo lote de insumos
    INSERT INTO lotes_insumos (insumo_id, quantidade, preco_unitario, data_entrada, data_validade, status, nome)
    VALUES (NEW.insumo_id, NEW.quantidade, NEW.preco_unitario, NEW.data_chegada, date(NEW.data_chegada, '+1 year'), 'ativo', 'Lote ' || (SELECT nome FROM insumos WHERE id = NEW.insumo_id));

    -- Atualizar o lote_id na tabela insumos_compras
    UPDATE insumos_compras
    SET lote_id = (SELECT last_insert_rowid())
    WHERE ordem_compra_id = NEW.ordem_compra_id AND insumo_id = NEW.insumo_id AND quantidade = NEW.quantidade AND preco_unitario = NEW.preco_unitario;

    -- Atualizar total da compra
    UPDATE ordens_compras
    SET total = total + (NEW.quantidade * NEW.preco_unitario)
    WHERE id = NEW.ordem_compra_id;
END;



-- Trigger para Atualizar Status de Validade
CREATE TRIGGER atualizar_status_validade_insumos
AFTER UPDATE ON lotes_insumos
FOR EACH ROW
WHEN NEW.data_validade < date('now')
BEGIN
    UPDATE lotes_insumos
    SET status = 'esgotado'
    WHERE id = NEW.id;
END;


-- Trigger para marcar lotes de insumos como esgotados quando a quantidade chegar a 0
CREATE TRIGGER marcar_lotes_insumos_esgotados AFTER UPDATE ON lotes_insumos
FOR EACH ROW
WHEN NEW.quantidade = 0
BEGIN
    UPDATE lotes_insumos
    SET status = 'esgotado'
    WHERE id = NEW.id;
END;





-- Trigger para marcar lotes de hortaliças como esgotados quando a quantidade chegar a 0
CREATE TRIGGER marcar_lotes_hortalicas_esgotados AFTER UPDATE ON lotes_hortalicas
FOR EACH ROW
WHEN NEW.quantidade = 0
BEGIN
    UPDATE lotes_hortalicas
    SET status = 'esgotado'
    WHERE id = NEW.id;
END;









-- Trigger para Reduzir Quantidade de Hortaliças no Lote Durante uma Venda
CREATE TRIGGER reduzir_quantidade_lote_hortalicas
AFTER INSERT ON hortalicas_vendas
FOR EACH ROW
BEGIN
    UPDATE lotes_hortalicas
    SET quantidade = quantidade - NEW.quantidade
    WHERE id = NEW.lote_id AND quantidade >= NEW.quantidade;
END;


--Trigger para Definir Preço Unitário de hortalicas_vendas
CREATE TRIGGER definir_preco_unitario_hortalicas_vendas
BEFORE INSERT ON hortalicas_vendas
FOR EACH ROW
BEGIN
    UPDATE hortalicas_vendas
    SET preco_unitario = (SELECT preco_venda FROM lotes_hortalicas WHERE id = NEW.lote_id)
    WHERE venda_id = NEW.venda_id AND lote_id = NEW.lote_id;
END;







CREATE TRIGGER criar_lote_hortalicas 
AFTER INSERT ON colheitas
FOR EACH ROW
BEGIN
    -- Inserir um novo lote de hortaliças com base na colheita
    INSERT INTO lotes_hortalicas (hortalica_id, quantidade, data_entrada, data_validade, status, nome)
    SELECT p.hortalica_id, NEW.quantidade, NEW.data_colheita, date(NEW.data_colheita, '+1 year'), 'ativo', h.nome
    FROM plantios p
    JOIN hortalicas h ON p.hortalica_id = h.id
    WHERE p.id = NEW.plantio_id;

    -- Atualizar o lote_hortalica_id na tabela colheitas
    UPDATE colheitas
    SET lote_hortalica_id = (SELECT last_insert_rowid())
    WHERE id = NEW.id;
END;


CREATE TRIGGER criar_cultura_perdida
AFTER INSERT ON colheitas
FOR EACH ROW
WHEN (SELECT quantidade FROM plantios WHERE id = NEW.plantio_id) > NEW.quantidade
BEGIN
    -- Inserir uma nova cultura perdida
    INSERT INTO culturas_perdidas (nome, colheita_id)
    VALUES (
        'Perda de ' || (SELECT nome FROM hortalicas WHERE id = (SELECT hortalica_id FROM plantios WHERE id = NEW.plantio_id)),
        NEW.id
    );
END;

CREATE TRIGGER criar_hortalicas_perdidas
AFTER INSERT ON culturas_perdidas
FOR EACH ROW
BEGIN
    -- Inserir hortaliças perdidas
    INSERT INTO hortalicas_perdidas (cultura_perdida_id, hortalica_id, quantidade)
    VALUES (
        NEW.id,
        (SELECT hortalica_id FROM plantios WHERE id = (SELECT plantio_id FROM colheitas WHERE id = NEW.colheita_id)),
        (SELECT quantidade - (SELECT quantidade FROM colheitas WHERE id = NEW.colheita_id) FROM plantios WHERE id = (SELECT plantio_id FROM colheitas WHERE id = NEW.colheita_id))
    );
END;





CREATE TRIGGER criar_insumo_lote_derivado
AFTER INSERT ON hortalicas_perdidas
FOR EACH ROW
BEGIN
    -- Inserir um novo insumo derivado na tabela insumos
    INSERT INTO insumos (fornecedor_id, nome, descricao, categoria, tipo, caminho_imagem)
    VALUES (
        NULL,
        'Rejeito ' || (SELECT nome FROM hortalicas WHERE id = NEW.hortalica_id),
        'Derivado de ' || (SELECT nome FROM hortalicas WHERE id = NEW.hortalica_id),
        'Insumo derivado de hortaliça perdida',
        'derivado',  -- Corrigido para o valor 'derivado'
        NULL
    );

    -- Criar um novo lote de insumos derivado
    INSERT INTO lotes_insumos (insumo_id, quantidade, preco_unitario, data_entrada, data_validade, status, nome)
    SELECT id, 
           NEW.quantidade, 
           0.00, 
           date('now'), 
           date('now', '+1 year'), 
           'ativo', 
           'Rejeito ' || (SELECT nome FROM hortalicas WHERE id = NEW.hortalica_id)
    FROM insumos
    WHERE nome = 'Rejeito ' || (SELECT nome FROM hortalicas WHERE id = NEW.hortalica_id);

    -- Atualizar o lote_insumo_id na tabela colheitas
   UPDATE colheitas
   SET lote_insumo_id = (SELECT last_insert_rowid())
    WHERE id = (SELECT colheita_id FROM culturas_perdidas WHERE id = NEW.cultura_perdida_id);
END;






-- Trigger para Atualizar Total de Vendas e Quantidade de Produtos
CREATE TRIGGER atualizar_total_vendas
AFTER INSERT ON hortalicas_vendas
FOR EACH ROW
BEGIN
    UPDATE vendas
    SET total_vendas = (SELECT SUM(hv.quantidade * hv.preco_unitario)
                        FROM hortalicas_vendas hv
                        WHERE hv.venda_id = NEW.venda_id),
        quantidade_produtos = (SELECT SUM(hv.quantidade)
                               FROM hortalicas_vendas hv
                               WHERE hv.venda_id = NEW.venda_id)
    WHERE id = NEW.venda_id;
END;


-- Automatizar o status para 'inativo' quando o usuário correspondente é desativado.
CREATE TRIGGER atualizar_status_funcionario
AFTER UPDATE ON usuarios
FOR EACH ROW
WHEN NEW.status = 'inativo'
BEGIN
    UPDATE funcionarios SET status = 'inativo' WHERE usuario_id = NEW.id;
END;



CREATE TRIGGER diminuir_quantidade_lote_insumos
AFTER INSERT ON insumos_plantios
FOR EACH ROW
BEGIN
    UPDATE lotes_insumos
    SET quantidade = quantidade - NEW.quantidade
    WHERE id = NEW.lote_id;
END;


