// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plantech.Data;

#nullable disable

namespace Plantech.Data.Migrations
{
    [DbContext(typeof(PlantechContext))]
    partial class PlantechContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Plantech.Models.Alerta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("DataCriacao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("date('now')");

                    b.Property<int>("LoteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lote_id");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("mensagem");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LoteId", "Tipo" }, "IX_alertas_lote_id_tipo")
                        .IsUnique();

                    b.ToTable("alertas", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("funcao");

                    b.HasKey("Id");

                    b.ToTable("cargos", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cnpj");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .HasColumnType("TEXT")
                        .HasColumnName("endereco");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("razao_social");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cnpj" }, "IX_clientes_cnpj")
                        .IsUnique();

                    b.HasIndex(new[] { "Cnpj" }, "idx_clientes_cnpj");

                    b.HasIndex(new[] { "RazaoSocial" }, "idx_clientes_razao_social");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Colheita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("DataColheita")
                        .HasColumnType("TEXT")
                        .HasColumnName("data_colheita");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionario_id");

                    b.Property<int?>("LoteHortalicaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lote_hortalica_id");

                    b.Property<int?>("LoteInsumoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lote_insumo_id");

                    b.Property<int>("PlantioId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plantio_id");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FuncionarioId" }, "idx_colheitas_funcionario_id");

                    b.HasIndex(new[] { "LoteHortalicaId" }, "idx_colheitas_lote_hortalica_id");

                    b.HasIndex(new[] { "LoteInsumoId" }, "idx_colheitas_lote_insumo_id");

                    b.HasIndex(new[] { "PlantioId" }, "idx_colheitas_plantio_id");

                    b.ToTable("colheitas", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.CulturasPerdida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ColheitaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("colheita_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("ColheitaId");

                    b.ToTable("culturas_perdidas", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Fornecedore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Cidade")
                        .HasColumnType("TEXT")
                        .HasColumnName("cidade");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cnpj");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .HasColumnType("TEXT")
                        .HasColumnName("endereco");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("razao_social");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cnpj" }, "IX_fornecedores_cnpj")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "IX_fornecedores_email")
                        .IsUnique();

                    b.HasIndex(new[] { "Cnpj" }, "idx_fornecedores_cnpj");

                    b.HasIndex(new[] { "RazaoSocial" }, "idx_fornecedores_razao_social");

                    b.ToTable("fornecedores", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CargoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cargo_id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cpf");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cpf" }, "IX_funcionarios_cpf")
                        .IsUnique();

                    b.HasIndex(new[] { "CargoId" }, "idx_funcionarios_cargo_id");

                    b.HasIndex(new[] { "Cpf" }, "idx_funcionarios_cpf");

                    b.HasIndex(new[] { "UsuarioId" }, "idx_funcionarios_usuario_id");

                    b.ToTable("funcionarios", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Hortalica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CaminhoImagem")
                        .HasColumnType("TEXT")
                        .HasColumnName("caminho_imagem");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT")
                        .HasColumnName("observacoes");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nome" }, "IX_hortalicas_nome")
                        .IsUnique();

                    b.HasIndex(new[] { "Nome" }, "idx_hortalicas_nome");

                    b.ToTable("hortalicas", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.HortalicasPerdida", b =>
                {
                    b.Property<int>("CulturaPerdidaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cultura_perdida_id");

                    b.Property<int>("HortalicaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hortalica_id");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.HasKey("CulturaPerdidaId", "HortalicaId");

                    b.HasIndex(new[] { "CulturaPerdidaId" }, "idx_hortalicas_perdidas_cultura_perdida_id");

                    b.HasIndex(new[] { "HortalicaId" }, "idx_hortalicas_perdidas_hortalica_id");

                    b.ToTable("hortalicas_perdidas", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.HortalicasVenda", b =>
                {
                    b.Property<int>("VendaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("venda_id");

                    b.Property<int>("LoteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lote_id");

                    b.Property<double?>("PrecoUnitario")
                        .HasColumnType("REAL")
                        .HasColumnName("preco_unitario");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.HasKey("VendaId", "LoteId");

                    b.HasIndex(new[] { "LoteId" }, "idx_hortalicas_vendas_lote_id");

                    b.HasIndex(new[] { "VendaId" }, "idx_hortalicas_vendas_venda_id");

                    b.ToTable("hortalicas_vendas", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CaminhoImagem")
                        .HasColumnType("TEXT")
                        .HasColumnName("caminho_imagem");

                    b.Property<string>("Categoria")
                        .HasColumnType("TEXT")
                        .HasColumnName("categoria");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fornecedor_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT")
                        .HasColumnName("observacoes");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FornecedorId" }, "idx_insumos_fornecedor_id");

                    b.HasIndex(new[] { "Nome" }, "idx_insumos_nome");

                    b.ToTable("insumos", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.InsumosCompra", b =>
                {
                    b.Property<int>("OrdemCompraId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ordem_compra_id");

                    b.Property<int>("LoteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lote_id");

                    b.Property<DateOnly?>("DataChegada")
                        .HasColumnType("TEXT")
                        .HasColumnName("data_chegada");

                    b.Property<int>("InsumoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("insumo_id");

                    b.Property<double?>("PrecoUnitario")
                        .HasColumnType("REAL")
                        .HasColumnName("preco_unitario");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.HasKey("OrdemCompraId", "LoteId");

                    b.HasIndex("InsumoId");

                    b.HasIndex(new[] { "DataChegada" }, "idx_insumos_compras_data_chegada");

                    b.HasIndex(new[] { "LoteId" }, "idx_insumos_compras_lote_id");

                    b.HasIndex(new[] { "OrdemCompraId" }, "idx_insumos_compras_ordem_compra_id");

                    b.ToTable("insumos_compras", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.InsumosPlantio", b =>
                {
                    b.Property<int>("PlantioId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plantio_id");

                    b.Property<int>("LoteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lote_id");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.HasKey("PlantioId", "LoteId");

                    b.HasIndex(new[] { "LoteId" }, "idx_insumos_plantios_lote_id");

                    b.HasIndex(new[] { "PlantioId" }, "idx_insumos_plantios_plantio_id");

                    b.ToTable("insumos_plantios", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.LotesHortalica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("DataEntrada")
                        .HasColumnType("TEXT")
                        .HasColumnName("data_entrada");

                    b.Property<DateOnly?>("DataValidade")
                        .HasColumnType("TEXT")
                        .HasColumnName("data_validade");

                    b.Property<int>("HortalicaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hortalica_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.Property<double?>("PrecoVenda")
                        .HasColumnType("REAL")
                        .HasColumnName("preco_venda");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HortalicaId" }, "idx_lotes_hortalicas_hortalica_id");

                    b.ToTable("lotes_hortalicas", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.LotesInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("DataEntrada")
                        .HasColumnType("TEXT")
                        .HasColumnName("data_entrada");

                    b.Property<DateOnly?>("DataValidade")
                        .HasColumnType("TEXT")
                        .HasColumnName("data_validade");

                    b.Property<int>("InsumoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("insumo_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.Property<double?>("PrecoUnitario")
                        .HasColumnType("REAL")
                        .HasColumnName("preco_unitario");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InsumoId" }, "idx_lotes_insumos_insumo_id");

                    b.ToTable("lotes_insumos", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.OrdensCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("DataCompra")
                        .HasColumnType("TEXT")
                        .HasColumnName("data_compra");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fornecedor_id");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionario_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<double?>("Total")
                        .HasColumnType("REAL")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DataCompra" }, "idx_ordens_compras_data_compra");

                    b.HasIndex(new[] { "FornecedorId" }, "idx_ordens_compras_fornecedor_id");

                    b.HasIndex(new[] { "FuncionarioId" }, "idx_ordens_compras_funcionario_id");

                    b.ToTable("ordens_compras", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Plantio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("DataPlantio")
                        .HasColumnType("TEXT")
                        .HasColumnName("data_plantio");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionario_id");

                    b.Property<int>("HortalicaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hortalica_id");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DataPlantio" }, "idx_plantios_data");

                    b.HasIndex(new[] { "FuncionarioId" }, "idx_plantios_funcionario_id");

                    b.HasIndex(new[] { "HortalicaId" }, "idx_plantios_hortalica_id");

                    b.ToTable("plantios", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome_usuario");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("salt");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("senha");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_usuarios_email")
                        .IsUnique();

                    b.HasIndex(new[] { "NomeUsuario" }, "IX_usuarios_nome_usuario")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "idx_usuarios_email");

                    b.HasIndex(new[] { "NomeUsuario" }, "idx_usuarios_nome_usuario");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cliente_id");

                    b.Property<DateOnly?>("Data")
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionario_id");

                    b.Property<string>("Pagamento")
                        .HasColumnType("TEXT")
                        .HasColumnName("pagamento");

                    b.Property<int?>("QuantidadeProdutos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade_produtos");

                    b.Property<double?>("TotalVendas")
                        .HasColumnType("REAL")
                        .HasColumnName("total_vendas");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClienteId" }, "idx_vendas_cliente_id");

                    b.HasIndex(new[] { "Data" }, "idx_vendas_data");

                    b.HasIndex(new[] { "FuncionarioId" }, "idx_vendas_funcionario_id");

                    b.ToTable("vendas", (string)null);
                });

            modelBuilder.Entity("Plantech.Models.Colheita", b =>
                {
                    b.HasOne("Plantech.Models.Funcionario", "Funcionario")
                        .WithMany("Colheita")
                        .HasForeignKey("FuncionarioId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.LotesHortalica", "LoteHortalica")
                        .WithMany("Colheita")
                        .HasForeignKey("LoteHortalicaId");

                    b.HasOne("Plantech.Models.LotesInsumo", "LoteInsumo")
                        .WithMany("Colheita")
                        .HasForeignKey("LoteInsumoId");

                    b.HasOne("Plantech.Models.Plantio", "Plantio")
                        .WithMany("Colheita")
                        .HasForeignKey("PlantioId")
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("LoteHortalica");

                    b.Navigation("LoteInsumo");

                    b.Navigation("Plantio");
                });

            modelBuilder.Entity("Plantech.Models.CulturasPerdida", b =>
                {
                    b.HasOne("Plantech.Models.Colheita", "Colheita")
                        .WithMany("CulturasPerdida")
                        .HasForeignKey("ColheitaId")
                        .IsRequired();

                    b.Navigation("Colheita");
                });

            modelBuilder.Entity("Plantech.Models.Funcionario", b =>
                {
                    b.HasOne("Plantech.Models.Cargo", "Cargo")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CargoId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.Usuario", "Usuario")
                        .WithMany("Funcionarios")
                        .HasForeignKey("UsuarioId")
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Plantech.Models.HortalicasPerdida", b =>
                {
                    b.HasOne("Plantech.Models.CulturasPerdida", "CulturaPerdida")
                        .WithMany("HortalicasPerdida")
                        .HasForeignKey("CulturaPerdidaId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.Hortalica", "Hortalica")
                        .WithMany("HortalicasPerdida")
                        .HasForeignKey("HortalicaId")
                        .IsRequired();

                    b.Navigation("CulturaPerdida");

                    b.Navigation("Hortalica");
                });

            modelBuilder.Entity("Plantech.Models.HortalicasVenda", b =>
                {
                    b.HasOne("Plantech.Models.LotesHortalica", "Lote")
                        .WithMany("HortalicasVenda")
                        .HasForeignKey("LoteId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.Venda", "Venda")
                        .WithMany("HortalicasVenda")
                        .HasForeignKey("VendaId")
                        .IsRequired();

                    b.Navigation("Lote");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("Plantech.Models.Insumo", b =>
                {
                    b.HasOne("Plantech.Models.Fornecedore", "Fornecedor")
                        .WithMany("Insumos")
                        .HasForeignKey("FornecedorId");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("Plantech.Models.InsumosCompra", b =>
                {
                    b.HasOne("Plantech.Models.Insumo", "Insumo")
                        .WithMany("InsumosCompras")
                        .HasForeignKey("InsumoId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.LotesInsumo", "Lote")
                        .WithMany("InsumosCompras")
                        .HasForeignKey("LoteId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.OrdensCompra", "OrdemCompra")
                        .WithMany("InsumosCompras")
                        .HasForeignKey("OrdemCompraId")
                        .IsRequired();

                    b.Navigation("Insumo");

                    b.Navigation("Lote");

                    b.Navigation("OrdemCompra");
                });

            modelBuilder.Entity("Plantech.Models.InsumosPlantio", b =>
                {
                    b.HasOne("Plantech.Models.LotesInsumo", "Lote")
                        .WithMany("InsumosPlantios")
                        .HasForeignKey("LoteId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.Plantio", "Plantio")
                        .WithMany("InsumosPlantios")
                        .HasForeignKey("PlantioId")
                        .IsRequired();

                    b.Navigation("Lote");

                    b.Navigation("Plantio");
                });

            modelBuilder.Entity("Plantech.Models.LotesHortalica", b =>
                {
                    b.HasOne("Plantech.Models.Hortalica", "Hortalica")
                        .WithMany("LotesHortalicas")
                        .HasForeignKey("HortalicaId")
                        .IsRequired();

                    b.Navigation("Hortalica");
                });

            modelBuilder.Entity("Plantech.Models.LotesInsumo", b =>
                {
                    b.HasOne("Plantech.Models.Insumo", "Insumo")
                        .WithMany("LotesInsumos")
                        .HasForeignKey("InsumoId")
                        .IsRequired();

                    b.Navigation("Insumo");
                });

            modelBuilder.Entity("Plantech.Models.OrdensCompra", b =>
                {
                    b.HasOne("Plantech.Models.Fornecedore", "Fornecedor")
                        .WithMany("OrdensCompras")
                        .HasForeignKey("FornecedorId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.Funcionario", "Funcionario")
                        .WithMany("OrdensCompras")
                        .HasForeignKey("FuncionarioId")
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("Plantech.Models.Plantio", b =>
                {
                    b.HasOne("Plantech.Models.Funcionario", "Funcionario")
                        .WithMany("Plantios")
                        .HasForeignKey("FuncionarioId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.Hortalica", "Hortalica")
                        .WithMany("Plantios")
                        .HasForeignKey("HortalicaId")
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("Hortalica");
                });

            modelBuilder.Entity("Plantech.Models.Venda", b =>
                {
                    b.HasOne("Plantech.Models.Cliente", "Cliente")
                        .WithMany("Venda")
                        .HasForeignKey("ClienteId")
                        .IsRequired();

                    b.HasOne("Plantech.Models.Funcionario", "Funcionario")
                        .WithMany("Venda")
                        .HasForeignKey("FuncionarioId")
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("Plantech.Models.Cargo", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Plantech.Models.Cliente", b =>
                {
                    b.Navigation("Venda");
                });

            modelBuilder.Entity("Plantech.Models.Colheita", b =>
                {
                    b.Navigation("CulturasPerdida");
                });

            modelBuilder.Entity("Plantech.Models.CulturasPerdida", b =>
                {
                    b.Navigation("HortalicasPerdida");
                });

            modelBuilder.Entity("Plantech.Models.Fornecedore", b =>
                {
                    b.Navigation("Insumos");

                    b.Navigation("OrdensCompras");
                });

            modelBuilder.Entity("Plantech.Models.Funcionario", b =>
                {
                    b.Navigation("Colheita");

                    b.Navigation("OrdensCompras");

                    b.Navigation("Plantios");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("Plantech.Models.Hortalica", b =>
                {
                    b.Navigation("HortalicasPerdida");

                    b.Navigation("LotesHortalicas");

                    b.Navigation("Plantios");
                });

            modelBuilder.Entity("Plantech.Models.Insumo", b =>
                {
                    b.Navigation("InsumosCompras");

                    b.Navigation("LotesInsumos");
                });

            modelBuilder.Entity("Plantech.Models.LotesHortalica", b =>
                {
                    b.Navigation("Colheita");

                    b.Navigation("HortalicasVenda");
                });

            modelBuilder.Entity("Plantech.Models.LotesInsumo", b =>
                {
                    b.Navigation("Colheita");

                    b.Navigation("InsumosCompras");

                    b.Navigation("InsumosPlantios");
                });

            modelBuilder.Entity("Plantech.Models.OrdensCompra", b =>
                {
                    b.Navigation("InsumosCompras");
                });

            modelBuilder.Entity("Plantech.Models.Plantio", b =>
                {
                    b.Navigation("Colheita");

                    b.Navigation("InsumosPlantios");
                });

            modelBuilder.Entity("Plantech.Models.Usuario", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Plantech.Models.Venda", b =>
                {
                    b.Navigation("HortalicasVenda");
                });
#pragma warning restore 612, 618
        }
    }
}
